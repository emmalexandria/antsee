{"$message_type":"diagnostic","message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/color/rgb.rs","byte_start":41,"byte_end":45,"line_start":3,"line_end":3,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"use super::css::{self, CssColors};","highlight_start":18,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/color/rgb.rs","byte_start":41,"byte_end":47,"line_start":3,"line_end":3,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"use super::css::{self, CssColors};","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/color/rgb.rs:3:18\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::css::{self, CssColors};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/color/ansi256.rs","byte_start":11,"byte_end":18,"line_start":1,"line_end":1,"column_start":12,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Ansi256(u8);","highlight_start":12,"highlight_end":19}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/color/ansi256.rs","byte_start":19,"byte_end":21,"line_start":1,"line_end":1,"column_start":20,"column_end":22,"is_primary":true,"text":[{"text":"pub struct Ansi256(u8);","highlight_start":20,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing this field","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/color/ansi256.rs:1:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Ansi256(u8);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing this field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true","code":{"code":"clippy::from_over_into","explanation":null},"level":"warning","spans":[{"file_name":"src/color/ansi16.rs","byte_start":499,"byte_end":523,"line_start":31,"line_end":31,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"impl Into<u8> for Ansi16 {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::from_over_into)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the `Into` implementation with `From<color::ansi16::Ansi16>`","code":null,"level":"help","spans":[{"file_name":"src/color/ansi16.rs","byte_start":504,"byte_end":508,"line_start":31,"line_end":31,"column_start":6,"column_end":10,"is_primary":true,"text":[{"text":"impl Into<u8> for Ansi16 {","highlight_start":6,"highlight_end":10}],"label":null,"suggested_replacement":"From","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":509,"byte_end":511,"line_start":31,"line_end":31,"column_start":11,"column_end":13,"is_primary":true,"text":[{"text":"impl Into<u8> for Ansi16 {","highlight_start":11,"highlight_end":13}],"label":null,"suggested_replacement":"Ansi16","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":517,"byte_end":523,"line_start":31,"line_end":31,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"impl Into<u8> for Ansi16 {","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":"u8","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":533,"byte_end":537,"line_start":32,"line_end":32,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    fn into(self) -> u8 {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"from","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":538,"byte_end":542,"line_start":32,"line_end":32,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    fn into(self) -> u8 {","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"val: Ansi16","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":547,"byte_end":549,"line_start":32,"line_end":32,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"    fn into(self) -> u8 {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/color/ansi16.rs","byte_start":560,"byte_end":564,"line_start":33,"line_end":33,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        self as u8","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/color/ansi16.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Into<u8> for Ansi16 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\u001b[0m\n\u001b[0m           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::from_over_into)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: replace the `Into` implementation with `From<color::ansi16::Ansi16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0mimpl \u001b[0m\u001b[0m\u001b[38;5;10mFrom\u001b[0m\u001b[0m<\u001b[0m\u001b[0m\u001b[38;5;10mAnsi16\u001b[0m\u001b[0m> for \u001b[0m\u001b[0m\u001b[38;5;10mu8\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    fn \u001b[0m\u001b[0m\u001b[38;5;10mfrom\u001b[0m\u001b[0m(\u001b[0m\u001b[0m\u001b[38;5;10mval: Ansi16\u001b[0m\u001b[0m) -> \u001b[0m\u001b[0m\u001b[38;5;10mSelf\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mval\u001b[0m\u001b[0m as u8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this match could be replaced by its body itself","code":{"code":"clippy::match_single_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/color/ansi16.rs","byte_start":708,"byte_end":778,"line_start":40,"line_end":42,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match value {","highlight_start":9,"highlight_end":22},{"text":"            _ => Err(Ansi16Error::U8TooLarge),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::match_single_binding)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the match body instead","code":null,"level":"help","spans":[{"file_name":"src/color/ansi16.rs","byte_start":708,"byte_end":778,"line_start":40,"line_end":42,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match value {","highlight_start":9,"highlight_end":22},{"text":"            _ => Err(Ansi16Error::U8TooLarge),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"Err(Ansi16Error::U8TooLarge)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this match could be replaced by its body itself\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/color/ansi16.rs:40:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match value {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => Err(Ansi16Error::U8TooLarge),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using the match body instead: `Err(Ansi16Error::U8TooLarge)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::match_single_binding)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
